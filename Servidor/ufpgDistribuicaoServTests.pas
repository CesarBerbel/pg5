{*******************************************************}
{* 
{* ufpgDistribuicaoServTests.pas
{* Delphi Implementation of the Class TlfpgDistribuicaoServTests
{* Generated by Enterprise Architect
{* Created on:      10-jun-2013 12:32:05
{* Original author: maxback
{*  
{*******************************************************}

unit ufpgDistribuicaoServTests;

interface

uses
  contnrs, SysUtils, TestFrameWork, uspTestCase, uspControleTestesUnitarios,
  Classes, DBClient, ufpgDistribuicaoServ, ufpgDistribuicaoServFake, fpgServidor_TLB,
  uspClientDataSet, usajConstante,
  //21/06/2013 - maxback - SALT 61989/1 -
  DB, uspExcecao, uspConjuntoDados, upg5cMensagem;

type
  TlfpgDistribuicaoServTests = class(TspTestCase)
  private
    //24/06/2013 - maxback - SALT 61989/1 - Data definida no inicio de cada teste para evitar
    // problemas de virada de dia
    FdDataSetUp: TDateTime;

    /// <summary>
    /// Cria registro para teste de peso do cartório.
    /// </summary>
    /// <param name="pnCdForo"> (integer) Código do foro a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdCartorio"> (integer) Código do cartório a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdGrupoPeso"> (integer) Código do grupo de peso a ser
    /// inserido no registro de peso. </param>
    /// <param name="pnNuFaixadistrib"> (integer) Número da faixa de
    /// distribuição a ser inserido no registro de peso. </param>
    /// <remarks>
    /// //19/06/2013 - maxback - SALT 61989/1 -
    /// </remarks>
    procedure AdicionarRegistrosPesoCartorioParaTeste(
      const pnCdForo, pnCdCartorio, pnCdGrupoPeso, pnNuFaixadistrib: integer);

    /// <summary>
    /// Cria registro para teste de peso global do cartório.
    /// </summary>
    /// <param name="pnCdForo"> (integer) Código do foro a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdCartorio"> (integer) Código do cartório a ser inserido no
    /// registro de peso. </param>
    /// <remarks>
    /// //19/06/2013 - maxback - SALT 61989/1 -
    /// </remarks>
    procedure AdicionarRegistrosPesoGlobalCartorioParaTeste(const pnCdForo, pnCdCartorio: integer);

    /// <summary>
    /// Cria registro para teste de peso global da vaga.
    /// </summary>
    /// <param name="pnCdForo"> (integer) Código do foro a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdVara"> (integer) Código da vara a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdVaga"> (integer) Código da vaga a ser inserido no
    /// registro de peso. </param>
    /// <remarks>
    /// //19/06/2013 - maxback - SALT 61989/1 -
    /// </remarks>
    procedure AdicionarRegistrosPesoGlobalVagaParaTeste(
      const pnCdForo, pnCdVara, pnCdVaga: integer);

    /// <summary>
    /// Cria registro para teste de peso global da vara.
    /// </summary>
    /// <param name="pnCdForo"> (integer) Código do foro a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdVara"> (integer) Código da vara a ser inserido no
    /// registro de peso. </param>
    /// <remarks>
    /// //19/06/2013 - maxback - SALT 61989/1 -
    /// </remarks>
    procedure AdicionarRegistrosPesoGlobalVaraParaTeste(const pnCdForo, pnCdVara: integer);

    /// <summary>
    /// Cria registros para teste sobre os pesos necessário ao teste para determinado foro,
    /// vara, cartório, vaga, grupo de peso e faixa de distribuição.
    /// </summary>
    /// <param name="pnCdForo"> (integer) Código do foro a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdVara"> (integer) Código da vara a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdCartorio"> (integer) Código do cartório a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdVaga"> (integer) Código da vaga a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdGrupoPeso"> (integer) Código do grupo de peso a ser
    /// inserido no registro de peso. </param>
    /// <param name="pnNuFaixadistrib"> (integer) Número da faixa de
    /// distribuição a ser inserido no registro de peso. </param>
    /// <remarks>
    /// //19/06/2013 - maxback - SALT 61989/1 -
    /// </remarks>
    procedure AdicionarRegistrosPesoParaTeste(
      const pnCdForo, pnCdVara, pnCdCartorio, pnCdVaga, pnCdGrupoPeso, pnNuFaixadistrib: integer);

    /// <summary>
    /// Cria registro para teste de peso da vaga.
    /// </summary>
    /// <param name="pnCdForo"> (integer) Código do foro a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdVara"> (integer) Código da vara a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdVaga"> (integer) Código da vaga a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdGrupoPeso"> (integer) Código do grupo de peso a ser
    /// inserido no registro de peso. </param>
    /// <param name="pnNuFaixadistrib"> (integer) Número da faixa de
    /// distribuição a ser inserido no registro de peso. </param>
    /// <remarks>
    /// //19/06/2013 - maxback - SALT 61989/1 -
    /// </remarks>
    procedure AdicionarRegistrosPesoVagaParaTeste(
      const pnCdForo, pnCdVara, pnCdVaga, pnCdGrupoPeso, pnNuFaixadistrib: integer);

    /// <summary>
    /// Cria registro para teste de peso da vara.
    /// </summary>
    /// <param name="pnCdForo"> (integer) Código do foro a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdVara"> (integer) Código da vara a ser inserido no
    /// registro de peso. </param>
    /// <param name="pnCdGrupoPeso"> (integer) Código do grupo de peso a ser
    /// inserido no registro de peso. </param>
    /// <param name="pnNuFaixadistrib"> (integer) Número da faixa de
    /// distribuição a ser inserido no registro de peso. </param>
    /// <remarks>
    /// //19/06/2013 - maxback - SALT 61989/1 -
    /// </remarks>
    procedure AdicionarRegistrosPesoVaraParaTeste(
      const pnCdForo, pnCdVara, pnCdGrupoPeso, pnNuFaixadistrib: integer);

    /// <summary>
    ///  Adiciona dados para teste de inicio de contabilização de pesos por foro e competência.
    /// </summary>
    /// <param name="pnCdForo">
    /// </param>
    /// <param name="pnCdTipoCartorio">
    /// </param>
    /// <param name="pdtInicioPesoVara">
    /// </param>
    /// <returns>
    ///  None
    /// </returns>
    /// <remarks>
    /// //21/06/2013 - maxback - SALT 61989/1 -
    /// </remarks>
    procedure AdicionarRegistroInicioContabilizacaoPesos(const pnCdForo, pnCdTipoCartorio: integer;
      pdtInicioPesoVara: TDateTime);

    /// <summary>
    ///  chamam o método para abatimento de pesos e retorna a quantidade de peso total da vara.
    /// </summary>
    /// <param name="pdtDistribuicao">
    /// </param>
    /// <returns>
    ///  Integer
    /// </returns>
    /// <remarks>
    /// salt Alterado para retornar efpgPesoVara.qtTotal para verificação do teste.
    /// </remarks>
    function ChamarAbatePesosRedistForoBasesDistintasOrigem(
      const pdtDistribuicao: TDatetime): integer;

    /// <summary>
    ///  realiza a chamada ao método AbatePesosRedistForoBasesdistintasOrigem com a data atual
    ///  (Definida em FdDataSetUp).
    /// </summary>
    /// <remarks>
    /// //24/06/2013 - maxback - SALT 61989/1 -  Sem parâmetros para poder ser chamado para testar
    /// a exceção.
    /// </remarks>
    procedure ChamarAbatePesosRedistForoBasesDistintasOrigemDataAtual;
    function ChamarPegarDataInformatizacao(const pnCdForo, pnCdTipoCartorio: integer): TDatetime;
    /// <summary>
    /// Método auxiliar para configurar dados para os testes do método
    /// AbatePesosRedistForoBasesDistintasOrigem.
    /// </summary>
    /// <param name="pdtDataInicioPesos"> (TDate) Indica a data de inicio dos pesos a
    /// ser configurada.
    /// </param>
    /// <param name="pbExisteRegistroProcMvCompensa"> (Boolean) Se True indica que o
    /// método fake de verificação da existência de registros em efpgProcMvCompensa
    /// deve retornar true se consultar o processo.
    /// </param>
    /// <remarks>
    /// //24/06/2013 - maxback - SALT 61989/1 - 
    /// </remarks>
    procedure ConfigurarAbatePesoVaraOrigemRedistEntreForos(const pdtDataInicioPesos: TDateTime;
      const pbExisteRegistroProcMvCompensa: boolean);

    /// <summary>
    ///  Definine a estrutura do dataset e deixa o mesmo preparado para receber registros.
    /// </summary>
    /// <param name="poCdsDistProcesso">
    /// </param>
    /// <returns>
    ///  None
    /// </returns>
    /// <remarks>
    /// //24/06/2013 - maxback - SALT 61989/1 -
    /// A estrutura é a esperada no método de consulta da data de informatização por foro e
    /// compet~encia (PegarDataInformatizacao).
    /// </remarks>
    procedure DefinirEstruturaRegistroConsultaDataInfomrmatizacao(
      poCdsDistProcesso: TspConjuntoDados);

    /// <summary>
    ///  Definine a estrutura do dataset e deixa o mesmo preparado para receber registros.
    /// </summary>
    /// <param name="poCdsDistProcesso">
    /// </param>
    /// <returns>
    ///  None
    /// </returns>
    /// <remarks>
    /// //24/06/2013 - maxback - SALT 61989/1 -
    /// A estrutura é a esperada no método de abatimento de pesos quando o processo é recebido no
    /// foro de outra base (AbatePesosRedistForoBasesDistintasOrigem).
    /// </remarks>
    procedure DefinirEstruturaRegistroDistrIbuicaoAjustePeso(poCdsDistProcesso: TspConjuntoDados);

    procedure ExecutarAjustaPesoCartorioCompensaPesoMov(
      const pbIncrementarCompesaPesoMov: boolean);
    procedure ExecutarAjustaPesoVaraCompensaPesoMov(const pbIncrementarCompesaPesoMov: boolean);
    procedure ExecutarAjustaPesoVagaCompensaPesoMov(const pbIncrementarCompesaPesoMov: boolean);
  protected
    FefpgDistribuicaoServFake: TlfpgDistribuicaoServFake;
    procedure SetUp; override;
    procedure TearDown; override;

    /// <summary>
    ///  Adiciona dados nas tabelas virtuais do método fake.
    /// </summary>
    /// <returns>
    ///  None
    /// </returns>
    /// <remarks>
    /// //21/06/2013 - maxback - SALT 61989/1 -  Adiciona também dados de inicio de contabilização de pesos.
    /// </remarks>
    procedure DefinirDadosInicaisTestePeso;
  published
    procedure TestarAjustaPesoCartorioSemExistirRegistroPeso;
    procedure TestarAjustaPesoVaraSemExistirRegistroPeso;
    procedure TestarAjustaPesoVagaSemExistirRegistroPeso;

    procedure TestarAjustaPesoCartorioSemExistirRegistroPesoIncrementandoPesoMov;
    procedure TestarAjustaPesoVaraSemExistirRegistroPesoIncrementandoPesoMov;
    procedure TestarAjustaPesoVagaSemExistirRegistroPesoIncrementandoPesoMov;

    procedure TestarAjustaPesoCartorioSemExistirRegistroPesoDecrementaPesoTotal;
    procedure TestarAjustaPesoVaraSemExistirRegistroPesoDecrementaPesoTotal;
    procedure TestarAjustaPesoVagaSemExistirRegistroPesoDecrementaPesoTotal;

    procedure TestarAjustaPesoCartorioIncrementandoPesoMov;
    procedure TestarAjustaPesoVaraIncrementandoPesoMov;
    procedure TestarAjustaPesoVagaIncrementandoPesoMov;

    procedure TestarAjustaPesoCartorioDecrementaPesoTotal;
    procedure TestarAjustaPesoVaraDecrementaPesoTotal;
    procedure TestarAjustaPesoVagaDecrementaPesoTotal;

    procedure TestarAjustaPesoCartorioDecrementandoPesoGlobal;
    procedure TestarAjustaPesoVaraDecrementandoPesoGlobal;
    procedure TestarAjustaPesoVagaDecrementandoPesoGlobal;

    procedure TestarAjustaPesoCartorioDecrementandoPesoMov;
    procedure TestarAjustaPesoVaraDecrementandoPesoMov;
    procedure TestarAjustaPesoVagaDecrementandoPesoMov;

    procedure TestarAjustaPesoCartorioIncrementaPesoTotal;
    procedure TestarAjustaPesoVaraIncrementaPesoTotal;
    procedure TestarAjustaPesoVagaIncrementaPesoTotal;

    procedure TestarAjustaPesoCartorioIncrementaPesoGlobal;
    procedure TestarAjustaPesoVaraIncrementaPesoGlobal;
    procedure TestarAjustaPesoVagaIncrementaPesoGlobal;

    //21/06/2013 - maxback - SALT 61989/1 -
    procedure TestarPegarDataInformatizacaoSemRegistro;
    procedure TestarPegarDataInformatizacaoDataNula;
    procedure TestarPegarDataInformatizacaoDataExistente;

    procedure TestarAbatePesosRedistForoBasesDistintasOrigemAnteriorInicioPesos;
    procedure TestarAbatePesosRedistForoBasesDistintasOrigemSemRegistroInicioPesos;
    procedure TestarAbatePesosRedistForoBasesDistintasOrigemSemRegistroInicioPesosMsgErro;
    procedure TestarAbatePesosRedistForoBasesDistintasOrigemDataInicioPesosInvalida;
    procedure TestarAbatePesosRedistForoBasesDistintasOrigemSemRegistroProcMvCompensa;
    procedure TestarAbatePesosRedistForoBasesDistintasOrigemComRegistroProcMvCompensa;
  end;

implementation

uses
  ufpgConstante;

const
  nTST_PESOSREDISTFORO_CDPROCESSO_VALOR_DEFAULT = '1234567890123';
  nTST_PROCMVCOMP_PESOVAGA_QTTOTAL_VALOR_DEFAULT = 8;
  nTST_PROCMVCOMP_PESOVAGA_QTSAIDOMOVIMENT_VALOR_DEFAULT = 2;
  nTST_PROCMVCOMP_PESOGLOBALVAGA_QTPESOGLOBAL_VALOR_DEFAULT = 10;

  nTST_PROCMVCOMP_PESOCART_QTTOTAL_VALOR_DEFAULT = 16;
  nTST_PROCMVCOMP_PESOCART_QTSAIDOMOVIMENT_VALOR_DEFAULT = 4;
  nTST_PROCMVCOMP_PESOGLOBALCART_QTPESOGLOBAL_VALOR_DEFAULT = 20;

  nTST_PROCMVCOMP_PESOVARA_QTTOTAL_VALOR_DEFAULT = 32;
  nTST_PROCMVCOMP_PESOVARA_QTSAIDOMOVIMENT_VALOR_DEFAULT = 8;
  nTST_PROCMVCOMP_PESOGLOBALVARA_QTPESOGLOBAL_VALOR_DEFAULT = 40;

  nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT = 7;
  nTST_PROCMVCOMP_PESOVARA_CDVARA_VALOR_DEFAULT = 4;
  nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT = 23;

  nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT = 8643;

  nTST_PROCMVCOMP_PESOVAGA_CDVAGA_VALOR_DEFAULT = 3;
  nTST_PROCMVCOMP_PESOCART_CDCARTORIO_VALOR_DEFAULT = 5;
  nTST_PROCMVCOMP_PESOGLOBALVAGA_FLVAGAATIVA_VALOR_DEFAULT = 'S';
  nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT = 'N';

  //24/06/2013 - maxback - SALT 61989/1 -
  nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT = 123;

//19/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.AdicionarRegistrosPesoCartorioParaTeste(
  const pnCdForo, pnCdCartorio, pnCdGrupoPeso, pnNuFaixadistrib: integer);
var
  ocds: TClientDataSet;
begin
  ocds := FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio;
  ocds.insert;
  ocds.FieldByName('CDFORO').AsInteger := pnCdForo;
  ocds.FieldByName('CDCARTORIO').AsInteger := pnCdCartorio;
  ocds.FieldByName('CDGRUPOPESO').AsInteger := pnCdGrupoPeso;
  ocds.FieldByName('NUFAIXADIST').AsInteger := pnNuFaixadistrib;
  ocds.FieldByName('FLREUPRESO').AsString := nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT;
  ocds.FieldByName('QTINICIAL').AsInteger := 0;
  ocds.FieldByName('QTDISTRIBSORTEIO').AsInteger :=
    nTST_PROCMVCOMP_PESOCART_QTTOTAL_VALOR_DEFAULT +
    nTST_PROCMVCOMP_PESOCART_QTSAIDOMOVIMENT_VALOR_DEFAULT;
  ocds.FieldByName('QTDISTRIBDEPEND').AsInteger := 0;
  ocds.FieldByName('QTDISTRIBPREV').AsInteger := 0;
  ocds.FieldByName('QTREDISTRIBSORTEIO').AsInteger := 0;
  ocds.FieldByName('QTREDISTRIBDEPEND').AsInteger := 0;
  ocds.FieldByName('QTREDISTRIBPREV').AsInteger := 0;
  ocds.FieldByName('QTENTRADOALTER').AsInteger := 0;
  ocds.FieldByName('QTEXCLUIDO').AsInteger := 0;
  ocds.FieldByName('QTCANCELADO').AsInteger := 0;
  ocds.FieldByName('QTSAIDOALTER').AsInteger := 0;
  ocds.FieldByName('QTSAIDOREDISTRIB').AsInteger := 0;
  ocds.FieldByName('QTTOTAL').AsInteger := nTST_PROCMVCOMP_PESOCART_QTTOTAL_VALOR_DEFAULT;
  ocds.FieldByName('QTSAIDOMOVIMENT').AsInteger :=
    nTST_PROCMVCOMP_PESOCART_QTSAIDOMOVIMENT_VALOR_DEFAULT;
  ocds.post;
end;

//19/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.AdicionarRegistrosPesoGlobalCartorioParaTeste(
  const pnCdForo, pnCdCartorio: integer);
begin
  //peso global do cartorio
  TspTestCase.AppendStringList(FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalCartorio,
    Format('%d,%d,%d', [pnCdForo, pnCdCartorio,
    nTST_PROCMVCOMP_PESOGLOBALCART_QTPESOGLOBAL_VALOR_DEFAULT]));
end;

//19/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.AdicionarRegistrosPesoGlobalVagaParaTeste(
  const pnCdForo, pnCdVara, pnCdVaga: integer);
begin
  TspTestCase.AppendStringList(FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalVaga,
    Format('%d,%d,%d,%s,%d,Titular', [pnCdForo, pnCdVara, pnCdVaga,
    nTST_PROCMVCOMP_PESOGLOBALVAGA_FLVAGAATIVA_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOGLOBALVAGA_QTPESOGLOBAL_VALOR_DEFAULT]));
end;

//19/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.AdicionarRegistrosPesoGlobalVaraParaTeste(
  const pnCdForo, pnCdVara: integer);
begin
  TspTestCase.AppendStringList(FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalVara,
    Format('%d,%d,%d,0', [pnCdForo, pnCdVara,
    nTST_PROCMVCOMP_PESOGLOBALVARA_QTPESOGLOBAL_VALOR_DEFAULT]));
end;

procedure TlfpgDistribuicaoServTests.AdicionarRegistrosPesoParaTeste(
  const pnCdForo, pnCdVara, pnCdCartorio, pnCdVaga, pnCdGrupoPeso, pnNuFaixadistrib: integer);
begin
  AdicionarRegistrosPesoVaraParaTeste(pnCdForo, pnCdVara, pnCdGrupoPeso, pnNuFaixadistrib);
  AdicionarRegistrosPesoGlobalVaraParaTeste(pnCdForo, pnCdVara);
  AdicionarRegistrosPesoCartorioParaTeste(pnCdForo, pnCdCartorio, pnCdGrupoPeso, pnNuFaixadistrib);
  AdicionarRegistrosPesoGlobalCartorioParaTeste(pnCdForo, pnCdCartorio);
  AdicionarRegistrosPesoVagaParaTeste(pnCdForo, pnCdVara, pnCdVaga, pnCdGrupoPeso,
    pnNuFaixadistrib);

  (*TODO: extracted code
  //peso global vaga
  TspTestCase.AppendStringList(FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalVaga,
    Format('%d,%d,%d,%s,%d,Titular', [pnCdForo, pnCdVara, pnCdVaga,
    nTST_PROCMVCOMP_PESOGLOBALVAGA_FLVAGAATIVA_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOGLOBALVAGA_QTPESOGLOBAL_VALOR_DEFAULT]));
  *)
  AdicionarRegistrosPesoGlobalVagaParaTeste(pnCdForo, pnCdVara, pnCdVaga);
end;

//19/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.AdicionarRegistrosPesoVagaParaTeste(
  const pnCdForo, pnCdVara, pnCdVaga, pnCdGrupoPeso, pnNuFaixadistrib: integer);
var
  ocds: TClientDataSet;
begin
  ocds := FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga;
  ocds.insert;
  ocds.FieldByName('CDFORO').AsInteger := pnCdForo;
  ocds.FieldByName('CDVARA').AsInteger := pnCdVara;
  ocds.FieldByName('CDVAGA').AsInteger := pnCdVaga;
  ocds.FieldByName('CDGRUPOPESO').AsInteger := pnCdGrupoPeso;
  ocds.FieldByName('NUFAIXADIST').AsInteger := pnNuFaixadistrib;
  ocds.FieldByName('FLREUPRESO').AsString := nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT;
  ocds.FieldByName('QTFICTICIA').AsInteger := 0;
  ocds.FieldByName('QTENTRADODISTRIB').AsInteger :=
    nTST_PROCMVCOMP_PESOVAGA_QTTOTAL_VALOR_DEFAULT +
    nTST_PROCMVCOMP_PESOVAGA_QTSAIDOMOVIMENT_VALOR_DEFAULT;
  ocds.FieldByName('QTENTRADOREDISTRIB').AsInteger := 0;
  ocds.FieldByName('QTENTRADOALTER').AsInteger := 0;
  ocds.FieldByName('QTEXCLUIDO').AsInteger := 0;
  ocds.FieldByName('QTCANCELADO').AsInteger := 0;
  ocds.FieldByName('QTSAIDOALTER').AsInteger := 0;
  ocds.FieldByName('QTSAIDOREDISTRIB').AsInteger := 0;
  ocds.FieldByName('QTTOTAL').AsInteger := nTST_PROCMVCOMP_PESOVAGA_QTTOTAL_VALOR_DEFAULT;
  ocds.FieldByName('QTSAIDOMOVIMENT').AsInteger :=
    nTST_PROCMVCOMP_PESOVAGA_QTSAIDOMOVIMENT_VALOR_DEFAULT;
  ocds.post;
end;

//19/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.AdicionarRegistrosPesoVaraParaTeste(
  const pnCdForo, pnCdVara, pnCdGrupoPeso, pnNuFaixadistrib: integer);
var
  ocds: TClientDataSet;
begin
  ocds := FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara;
  ocds.insert;
  ocds.FieldByName('CDFORO').AsInteger := pnCdForo;
  ocds.FieldByName('CDVARA').AsInteger := pnCdVara;
  ocds.FieldByName('CDGRUPOPESO').AsInteger := pnCdGrupoPeso;
  ocds.FieldByName('NUFAIXADIST').AsInteger := pnNuFaixadistrib;
  ocds.FieldByName('FLREUPRESO').AsString := nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT;
  ocds.FieldByName('QTINICIAL').AsInteger := 0;
  ocds.FieldByName('QTDISTRIBSORTEIO').AsInteger :=
    nTST_PROCMVCOMP_PESOVARA_QTTOTAL_VALOR_DEFAULT +
    nTST_PROCMVCOMP_PESOVARA_QTSAIDOMOVIMENT_VALOR_DEFAULT;
  ocds.FieldByName('QTDISTRIBDEPEND').AsInteger := 0;
  ocds.FieldByName('QTDISTRIBPREV').AsInteger := 0;
  ocds.FieldByName('QTREDISTRIBSORTEIO').AsInteger := 0;
  ocds.FieldByName('QTREDISTRIBDEPEND').AsInteger := 0;
  ocds.FieldByName('QTREDISTRIBPREV').AsInteger := 0;
  ocds.FieldByName('QTENTRADOALTER').AsInteger := 0;
  ocds.FieldByName('QTEXCLUIDO').AsInteger := 0;
  ocds.FieldByName('QTCANCELADO').AsInteger := 0;
  ocds.FieldByName('QTSAIDOALTER').AsInteger := 0;
  ocds.FieldByName('QTSAIDOREDISTRIB').AsInteger := 0;
  ocds.FieldByName('QTTOTAL').AsInteger := nTST_PROCMVCOMP_PESOVARA_QTTOTAL_VALOR_DEFAULT;
  ocds.FieldByName('QTDISTRIBVARANOVA').AsInteger := 0;
  ocds.FieldByName('QTSAIDOMOVIMENT').AsInteger :=
    nTST_PROCMVCOMP_PESOVARA_QTSAIDOMOVIMENT_VALOR_DEFAULT;
  ocds.post;
end;

procedure TlfpgDistribuicaoServTests.ExecutarAjustaPesoCartorioCompensaPesoMov(
  const pbIncrementarCompesaPesoMov: boolean);
begin
  FefpgDistribuicaoServFake.FsCdTipoOperacao := s_CPM_AjusteMovimentacaoCompensacaoPesos;
  FefpgDistribuicaoServFake.FbIncrementarCompensaoPesoMov := pbIncrementarCompesaPesoMov;
  FefpgDistribuicaoServFake.AjustaPesoCartorio(nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOCART_CDCARTORIO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT, True);

  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.FindKey(
    [nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOCART_CDCARTORIO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT]);
end;

{implementation of TlfpgDistribuicaoServTests}

procedure TlfpgDistribuicaoServTests.SetUp;
begin
  FdDataSetUp := Date;
  goControleTestesUnitarios.spAmbienteEmModoDeTestes := True;
  FefpgDistribuicaoServFake := TlfpgDistribuicaoServFake.spCreate(nil, CLASS_fpgServidorDM, IID_IfpgServidorDM); //PC_OK
  DefinirDadosInicaisTestePeso;
end;

procedure TlfpgDistribuicaoServTests.TearDown;
begin
  goControleTestesUnitarios.spAmbienteEmModoDeTestes := False;
  FreeAndNil(FefpgDistribuicaoServFake); //PC_OK
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoCartorioSemExistirRegistroPeso;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.EmptyDataSet;

  ExecutarAjustaPesoCartorioCompensaPesoMov(True);

  CheckEquals(1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.RecordCount);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVaraSemExistirRegistroPeso;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.EmptyDataSet;

  ExecutarAjustaPesoVaraCompensaPesoMov(True);

  CheckEquals(1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.RecordCount);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVagaSemExistirRegistroPeso;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.EmptyDataSet;

  ExecutarAjustaPesoVagaCompensaPesoMov(True);

  CheckEquals(1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.RecordCount);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoCartorioIncrementandoPesoMov;
begin
  ExecutarAjustaPesoCartorioCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOCART_QTSAIDOMOVIMENT_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.FieldByName(
    'QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVaraIncrementandoPesoMov;
begin
  ExecutarAjustaPesoVaraCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOVARA_QTSAIDOMOVIMENT_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FieldByName('QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVagaIncrementandoPesoMov;
begin
  ExecutarAjustaPesoVagaCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOVAGA_QTSAIDOMOVIMENT_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.FieldByName('QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoCartorioDecrementaPesoTotal;
begin
  ExecutarAjustaPesoCartorioCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOCART_QTTOTAL_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.FieldByName('QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVaraDecrementaPesoTotal;
begin
  ExecutarAjustaPesoVaraCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOVARA_QTTOTAL_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FieldByName('QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVagaDecrementaPesoTotal;
begin
  ExecutarAjustaPesoVagaCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOVAGA_QTTOTAL_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.FieldByName('QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoCartorioDecrementandoPesoGlobal;
begin
  FefpgDistribuicaoServFake.FbIncrementarCompensaoPesoMov := True;

  ExecutarAjustaPesoCartorioCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOGLOBALCART_QTPESOGLOBAL_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalCartorio.FieldByName(
    'QTPESOGLOBAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVaraDecrementandoPesoGlobal;
begin
  ExecutarAjustaPesoVaraCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOGLOBALVARA_QTPESOGLOBAL_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalVara.FieldByName(
    'QTPESOGLOBAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVagaDecrementandoPesoGlobal;
begin
  ExecutarAjustaPesoVagaCompensaPesoMov(True);

  CheckEquals(nTST_PROCMVCOMP_PESOGLOBALVAGA_QTPESOGLOBAL_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalVaga.FieldByName(
    'QTPESOGLOBAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoCartorioDecrementandoPesoMov;
begin
  ExecutarAjustaPesoCartorioCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOCART_QTSAIDOMOVIMENT_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.FieldByName(
    'QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVaraDecrementandoPesoMov;
begin
  ExecutarAjustaPesoVaraCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOVARA_QTSAIDOMOVIMENT_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FieldByName('QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVagaDecrementandoPesoMov;
begin
  ExecutarAjustaPesoVagaCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOVAGA_QTSAIDOMOVIMENT_VALOR_DEFAULT - 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.FieldByName('QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoCartorioIncrementaPesoTotal;
begin
  ExecutarAjustaPesoCartorioCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOCART_QTTOTAL_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.FieldByName('QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVaraIncrementaPesoTotal;
begin
  ExecutarAjustaPesoVaraCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOVARA_QTTOTAL_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FieldByName('QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVagaIncrementaPesoTotal;
begin
  ExecutarAjustaPesoVagaCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOVAGA_QTTOTAL_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.FieldByName('QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoCartorioIncrementaPesoGlobal;
begin
  ExecutarAjustaPesoCartorioCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOGLOBALCART_QTPESOGLOBAL_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalCartorio.FieldByName(
    'QTPESOGLOBAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVaraIncrementaPesoGlobal;
begin
  ExecutarAjustaPesoVaraCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOGLOBALVARA_QTPESOGLOBAL_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalVara.FieldByName(
    'QTPESOGLOBAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVagaIncrementaPesoGlobal;
begin
  ExecutarAjustaPesoVagaCompensaPesoMov(False);

  CheckEquals(nTST_PROCMVCOMP_PESOGLOBALVAGA_QTPESOGLOBAL_VALOR_DEFAULT + 1,
    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoGlobalVaga.FieldByName(
    'QTPESOGLOBAL').AsInteger);
end;

//21/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.DefinirDadosInicaisTestePeso;
var
  nCdForo: integer;
begin
  //popula diversos registros
  for nCdForo := (nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT - 5)
    to (nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT + 5) do
  begin
    AdicionarRegistrosPesoParaTeste(nCdForo, nTST_PROCMVCOMP_PESOVARA_CDVARA_VALOR_DEFAULT,
      nTST_PROCMVCOMP_PESOCART_CDCARTORIO_VALOR_DEFAULT,
      nTST_PROCMVCOMP_PESOVAGA_CDVAGA_VALOR_DEFAULT,
      nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT,
      nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT);
  end;
end;

procedure TlfpgDistribuicaoServTests.
TestarAjustaPesoCartorioSemExistirRegistroPesoIncrementandoPesoMov;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.EmptyDataSet;

  ExecutarAjustaPesoCartorioCompensaPesoMov(True);

  CheckEquals(1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.FieldByName(
    'QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.
TestarAjustaPesoVagaSemExistirRegistroPesoIncrementandoPesoMov;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.EmptyDataSet;

  ExecutarAjustaPesoVagaCompensaPesoMov(True);

  CheckEquals(1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.FieldByName(
    'QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.
TestarAjustaPesoVaraSemExistirRegistroPesoIncrementandoPesoMov;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.EmptyDataSet;

  ExecutarAjustaPesoVaraCompensaPesoMov(True);

  CheckEquals(1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FieldByName(
    'QTSAIDOMOVIMENT').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.
TestarAjustaPesoCartorioSemExistirRegistroPesoDecrementaPesoTotal;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.EmptyDataSet;

  ExecutarAjustaPesoCartorioCompensaPesoMov(True);

  CheckEquals(-1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoCartorio.FieldByName(
    'QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVagaSemExistirRegistroPesoDecrementaPesoTotal;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.EmptyDataSet;

  ExecutarAjustaPesoVagaCompensaPesoMov(True);

  CheckEquals(-1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.FieldByName(
    'QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.TestarAjustaPesoVaraSemExistirRegistroPesoDecrementaPesoTotal;
begin
  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.EmptyDataSet;

  ExecutarAjustaPesoVaraCompensaPesoMov(True);

  CheckEquals(-1, FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FieldByName(
    'QTTOTAL').AsInteger);
end;

procedure TlfpgDistribuicaoServTests.ExecutarAjustaPesoVaraCompensaPesoMov(
  const pbIncrementarCompesaPesoMov: boolean);
begin
  FefpgDistribuicaoServFake.FsCdTipoOperacao := s_CPM_AjusteMovimentacaoCompensacaoPesos;
  FefpgDistribuicaoServFake.FbIncrementarCompensaoPesoMov := pbIncrementarCompesaPesoMov;
  FefpgDistribuicaoServFake.AjustaPesoVara(nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_CDVARA_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT, True);

  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FindKey(
    [nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT, nTST_PROCMVCOMP_PESOVARA_CDVARA_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT]);
end;

procedure TlfpgDistribuicaoServTests.ExecutarAjustaPesoVagaCompensaPesoMov(
  const pbIncrementarCompesaPesoMov: boolean);
begin
  FefpgDistribuicaoServFake.FsCdTipoOperacao := s_CPM_AjusteMovimentacaoCompensacaoPesos;
  FefpgDistribuicaoServFake.FbIncrementarCompensaoPesoMov := pbIncrementarCompesaPesoMov;
  FefpgDistribuicaoServFake.AjustaPesoVaga(nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_CDVARA_VALOR_DEFAULT, nTST_PROCMVCOMP_PESOVAGA_CDVAGA_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT, True, True);

  FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVaga.FindKey(
    [nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT, nTST_PROCMVCOMP_PESOVARA_CDVARA_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVAGA_CDVAGA_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT,
    nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT]);
end;

//21/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.TestarPegarDataInformatizacaoDataExistente;
begin
  AdicionarRegistroInicioContabilizacaoPesos(nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT - 1, FdDataSetUp - 2);
  AdicionarRegistroInicioContabilizacaoPesos(nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT, FdDataSetUp);
  AdicionarRegistroInicioContabilizacaoPesos(nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT + 1, FdDataSetUp - 1);

  CheckEquals(FdDataSetUp, ChamarPegarDataInformatizacao(
    nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT));
end;

//21/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.TestarPegarDataInformatizacaoDataNula;
begin
  AdicionarRegistroInicioContabilizacaoPesos(nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT, DATA_INDEFINIDA);
  CheckEquals(DATA_INDEFINIDA, ChamarPegarDataInformatizacao(
    nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT));
end;

//21/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.TestarPegarDataInformatizacaoSemRegistro;
begin
  CheckEquals(DATA_INDEFINIDA, ChamarPegarDataInformatizacao(
    nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT, nTST_PROCMVCOMP_PESOVARA_CDVARA_VALOR_DEFAULT));
end;

//21/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.AdicionarRegistroInicioContabilizacaoPesos(
  const pnCdForo, pnCdTipoCartorio: integer; pdtInicioPesoVara: TDateTime);
var
  ocds: TClientDataSet;
begin
  ocds := FefpgDistribuicaoServFake.fpgTabelaVirtualForoTipoCart;
  ocds.insert;
  ocds.FieldByName('CDFORO').AsInteger := pnCdForo;
  ocds.FieldByName('CDTIPOCARTORIO').AsInteger := pnCdTipoCartorio;
  if pdtInicioPesoVara = DATA_INDEFINIDA then
    ocds.FieldByName('DTINICIOPESOVARA').Clear
  else
    ocds.FieldByName('DTINICIOPESOVARA').AsDateTime := pdtInicioPesoVara;
  ocds.post;
end;

//21/06/2013 - maxback - SALT 61989/1 -
function TlfpgDistribuicaoServTests.ChamarAbatePesosRedistForoBasesDistintasOrigem(
  const pdtDistribuicao: TDatetime): integer;
var
  oCdsDistProcesso: TspConjuntoDados;
begin
  oCdsDistProcesso := TspConjuntoDados.Create(nil);
  try
    DefinirEstruturaRegistroDistrIbuicaoAjustePeso(oCdsDistProcesso);

    oCdsDistProcesso.Append;
    oCdsDistProcesso.FieldByName('cdForo').AsInteger :=
      nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('cdVara').AsInteger :=
      nTST_PROCMVCOMP_PESOVARA_CDVARA_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('cdVaga').AsInteger :=
      nTST_PROCMVCOMP_PESOVAGA_CDVAGA_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('cdGrupoPeso').AsInteger :=
      nTST_PROCMVCOMP_PESOVARA_CDGRUPOPESO_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('nuFaixaDist').AsInteger :=
      nTST_PROCMVCOMP_PESOVARA_NUFAIXADIST_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('flReuPreso').AsString :=
      nTST_PROCMVCOMP_PESOVARA_FLREUPRESO_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('cdCartorio').AsInteger :=
      nTST_PROCMVCOMP_PESOCART_CDCARTORIO_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('cdProcesso').AsString :=
      nTST_PESOSREDISTFORO_CDPROCESSO_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('cdTipoCartorio').AsInteger :=
      nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT;
    oCdsDistProcesso.FieldByName('dtDistribuicao').AsDateTime := pdtDistribuicao;
    oCdsDistProcesso.Post;

    FefpgDistribuicaoServFake.AbatePesosRedistForoBasesDistintasOrigem(oCdsDistProcesso,
      STRING_INDEFINIDO);

    FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FindKey(
      [oCdsDistProcesso.FieldByName('cdForo').AsInteger, oCdsDistProcesso.FieldByName(
      'cdVara').AsInteger, oCdsDistProcesso.FieldByName('cdGrupoPeso').AsInteger,
      oCdsDistProcesso.FieldByName('nuFaixaDist').AsInteger,
      oCdsDistProcesso.FieldByName('flReuPreso').AsString]);

    result := FefpgDistribuicaoServFake.fpgTabelaVirtualPesoVara.FieldByName('QTTOTAL').AsInteger;
  finally
    FreeAndNil(oCdsDistProcesso);
  end;
end;

//24/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.ChamarAbatePesosRedistForoBasesDistintasOrigemDataAtual;
begin
  ChamarAbatePesosRedistForoBasesDistintasOrigem(FdDataSetUp);
end;

function TlfpgDistribuicaoServTests.ChamarPegarDataInformatizacao(
  const pnCdForo, pnCdTipoCartorio: integer): TDatetime;
var
  oCdsDistProcesso: TspConjuntoDados;
begin
  oCdsDistProcesso := TspConjuntoDados.Create(nil);
  try
    DefinirEstruturaRegistroConsultaDataInfomrmatizacao(oCdsDistProcesso);

    oCdsDistProcesso.Append;
    oCdsDistProcesso.FieldByName('cdForo').AsInteger := pnCdForo;
    oCdsDistProcesso.FieldByName('cdTipoCartorio').AsInteger := pnCdTipoCartorio;
    oCdsDistProcesso.Post;

    result := FefpgDistribuicaoServFake.PegarDataInformatizacao(oCdsDistProcesso);
  finally
    FreeAndNil(oCdsDistProcesso);
  end;
end;

//24/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.ConfigurarAbatePesoVaraOrigemRedistEntreForos(
  const pdtDataInicioPesos: TDateTime; const pbExisteRegistroProcMvCompensa: boolean);
begin
  AdicionarRegistroInicioContabilizacaoPesos(nTST_PROCMVCOMP_PESOVARA_CDFORO_VALOR_DEFAULT,
    nTST_PESOSREDISTFORO_CDTIPOCARTORIO_VALOR_DEFAULT, pdtDataInicioPesos);

  FefpgDistribuicaoServFake.fpgCdProcessoComRegProcMvCompensa := STRING_INDEFINIDO;
  if pbExisteRegistroProcMvCompensa then
  begin
    FefpgDistribuicaoServFake.fpgCdProcessoComRegProcMvCompensa :=
      nTST_PESOSREDISTFORO_CDPROCESSO_VALOR_DEFAULT;
  end;
end;

//24/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.DefinirEstruturaRegistroConsultaDataInfomrmatizacao(
  poCdsDistProcesso: TspConjuntoDados);
begin
  poCdsDistProcesso.FieldDefs.Add('cdForo', ftFloat);
  poCdsDistProcesso.FieldDefs.Add('cdTipoCartorio', ftFloat);
  poCdsDistProcesso.CreateDataSet;
  poCdsDistProcesso.EmptyDataSet;
end;

//24/06/2013 - maxback - SALT 61989/1 -
procedure TlfpgDistribuicaoServTests.DefinirEstruturaRegistroDistrIbuicaoAjustePeso(
  poCdsDistProcesso: TspConjuntoDados);
begin
  poCdsDistProcesso.FieldDefs.Add('cdForo', ftFloat);
  poCdsDistProcesso.FieldDefs.Add('cdVara', ftFloat);
  poCdsDistProcesso.FieldDefs.Add('cdVaga', ftFloat);
  poCdsDistProcesso.FieldDefs.Add('cdGrupoPeso', ftFloat);
  poCdsDistProcesso.FieldDefs.Add('nuFaixaDist', ftFloat);
  poCdsDistProcesso.FieldDefs.Add('cdProcesso', ftString, 13);
  poCdsDistProcesso.FieldDefs.Add('flReuPreso', ftString, 1);
  poCdsDistProcesso.FieldDefs.Add('cdCartorio', ftFloat);
  poCdsDistProcesso.FieldDefs.Add('cdTipoCartorio', ftFloat);
  poCdsDistProcesso.FieldDefs.Add('dtDistribuicao', ftDateTime);
  poCdsDistProcesso.CreateDataSet;
  poCdsDistProcesso.EmptyDataSet;
end;

procedure TlfpgDistribuicaoServTests.
TestarAbatePesosRedistForoBasesDistintasOrigemComRegistroProcMvCompensa;
begin
  ConfigurarAbatePesoVaraOrigemRedistEntreForos(FdDataSetUp - 1, True);

  CheckEquals(nTST_PROCMVCOMP_PESOVARA_QTTOTAL_VALOR_DEFAULT,
    ChamarAbatePesosRedistForoBasesDistintasOrigem(FdDataSetUp));
end;

procedure TlfpgDistribuicaoServTests.
TestarAbatePesosRedistForoBasesDistintasOrigemDataInicioPesosInvalida;
begin
  ConfigurarAbatePesoVaraOrigemRedistEntreForos(DATA_INDEFINIDA, False);

  CheckException(ChamarAbatePesosRedistForoBasesDistintasOrigemDataAtual, EspRegraNegocio);
end;

procedure TlfpgDistribuicaoServTests.
TestarAbatePesosRedistForoBasesDistintasOrigemAnteriorInicioPesos;
begin
  ConfigurarAbatePesoVaraOrigemRedistEntreForos(FdDataSetUp, False);

  CheckEquals(nTST_PROCMVCOMP_PESOVARA_QTTOTAL_VALOR_DEFAULT,
    ChamarAbatePesosRedistForoBasesDistintasOrigem(FdDataSetUp - 1));
end;

procedure TlfpgDistribuicaoServTests.
TestarAbatePesosRedistForoBasesDistintasOrigemSemRegistroProcMvCompensa;
begin
  ConfigurarAbatePesoVaraOrigemRedistEntreForos(FdDataSetUp - 1, False);

  CheckEquals(nTST_PROCMVCOMP_PESOVARA_QTTOTAL_VALOR_DEFAULT - 1,
    ChamarAbatePesosRedistForoBasesDistintasOrigem(FdDataSetUp));
end;

procedure TlfpgDistribuicaoServTests.
TestarAbatePesosRedistForoBasesDistintasOrigemSemRegistroInicioPesos;
begin
  CheckException(ChamarAbatePesosRedistForoBasesDistintasOrigemDataAtual, EspRegraNegocio);
end;

procedure TlfpgDistribuicaoServTests.
TestarAbatePesosRedistForoBasesDistintasOrigemSemRegistroInicioPesosMsgErro;
var
  sMsg: string;
  sMsgEsperada: string;
begin
  sMsg := STRING_INDEFINIDO;
  sMsgEsperada := Format('Código: %d, Complemento: %s', [n_avFPGSemDtInicioPesoVara,
    'atual do processo(no foro de origem)']);
  try
    ChamarAbatePesosRedistForoBasesDistintasOrigemDataAtual;
  except
    on E: EspRegraNegocio do
      sMsg := Format('Código: %d, Complemento: %s', [E.spCodigo, e.Message]);
  end;

  CheckEqualsString(sMsgEsperada, sMsg);
end;

initialization
  TestFrameWork.RegisterTest('Unitário\PG5\Servidor\ufpgDistribuicaoServTests',
    TlfpgDistribuicaoServTests.Suite);
end.
