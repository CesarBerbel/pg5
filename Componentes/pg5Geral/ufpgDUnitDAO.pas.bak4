unit ufpgDUnitDAO;

interface

uses
  SysUtils, inifiles, uspDatabase, ADODB, uspFuncoesExcel, Forms, Windows, Dialogs,
  uspClientDataSet, uspDUnitDAO, DB, uspConnectionSQLite, Classes;

type

  TfpgDUnitDAO = class(TspDUnitDAO)
  private
    FoConexao: TspDatabase;
    oConexaoSQLite: TADOConnection;
  public
    //    class function RetornaSiglaCliente: string;
    property FoConnectionSQLite: TADOConnection read oConexaoSQLite write oConexaoSQLite;
    function PegarDadosTeste(poCDS: TspClientDataSet; const psArquivo, psAba: string;
      psID: string = ''): boolean; override;
    class function PegarInstancia: TfpgDUnitDAO;
    class procedure DestruirInstancia;

  end;

implementation

uses
  usegRepositorio, ufpgVariaveisTestesGUI, ufpgFuncoesSQLTests;

var
  oConnectionSQLite: TspConnectionSQLite = nil;
  Instancia: TfpgDUnitDAO = nil;
  qyUsuario: TADOQuery;
  oUsuario: TStringList;

class function TfpgDUnitDAO.PegarInstancia: TfpgDUnitDAO;
begin
  if not Assigned(Instancia) then
  begin
    Instancia := TfpgDUnitDAO.Create; //PC_OK
    Instancia.FoConexao := nil;
    //    Instancia.oConexaoSQLite := nil;
  end;
  result := Instancia;
end;

class procedure TfpgDUnitDAO.DestruirInstancia;
begin
  if Assigned(Instancia) then
  begin
    FreeAndNil(Instancia); //PC_OK
  end;
  FreeAndNil(qyUsuario); //PC_OK
  FreeAndNil(oUsuario); //PC_OK
end;

// 27/10/2015 leandro.humbert SALT:186660/20/8
function TfpgDUnitDAO.PegarDadosTeste(poCDS: TspClientDataSet;
  const psArquivo, psAba: string; psID: string): boolean;
var
  sSQL: string;
  qyDados: TADOQuery;
  i: integer;
begin
  qyDados := TADOQuery.Create(nil);

  if not Assigned(oConnectionSQLite) then
    oConnectionSQLite := TspConnectionSQLite.Create; //PC_OK

  FoConnectionSQLite := oConnectionSQLite.ObterConnectionSQLite;

  qyDados.Connection := FoConnectionSQLite;

  try

    if psAba = 'DadosPrincipal' then
      sSQL :=
      'select b.dsUsuario as spUsuario, a.*         ' +
      '  from ' + psArquivo + '_' + psAba + ' a,    ' +
      '       esajUsuarioLoginTests b               ' +
      ' where a.spUsuario = b.cdUsuario             ' +
      '   and a.cdcliente = ' + QuotedStr(gsCliente)
    else
      sSQL :=
      'select *                                     ' +
      '  from ' + psArquivo + '_' + psAba             +
      ' where cdcliente = ' + QuotedStr(gsCliente)  +
      '   and spIdTeste = ' + psID;


    qyDados.Close;
    qyDados.SQL.Clear;
    qyDados.SQL.Add(sSQL);
    qyDados.Open;

    for i:=0 to qyDados.Fields.Count - 1 do
    begin
      poCDS.FieldDefs.Add(qyDados.Fields[i].FieldName, ftString, 150);

    end;

    poCDS.CreateDataSet;

    qyConf.SQL.Text := 'Select * from esajUsuarioLoginTests';
    qyConf.Open;

    qyDados.First;
    while not qyDados.EOF do
    begin
      poCDs.Insert;
      for i:=0 to qyDados.Fields.Count - 1 do
      begin
        poCDs.fieldbyname(qyDados.Fields[i].FieldName).asString := qyDados.Fields[i].AsString;
      end;
      poCDs.Post;
      qyDados.Next;
    end;

  finally

    result := poCDS.Active;

    FreeAndNil(qyDados);
    if Assigned(oConnectionSQLite) then
      FreeAndNil(oConnectionSQLite); //PC_OK
  end;
end;

end.

